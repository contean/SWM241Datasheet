.. vim: syntax=rst

CRC计算单元（CRC）
------------

概述
~~

SWM241系列所有型号CRC模块操作均相同，主要应用于核实数据传输或者数据存储的正确性和完整性，使用前需使能CRC模块时钟。

CRC模块分为CRC-32、CRC-16、CRC-8。使用CRC-32多项式进行计算时，输入数据有效位宽可选择为32Bit、16Bit、8Bit，使用CRC-16多项式进行计算时，输入数据有效位宽可选择16Bit、8Bit。

特性
~~

-  支持四种多项式

   -  x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1

   -  x^16+x^12+x^5+1

   -  x^16+x^15+x^2+1

   -  x^8+x^2+x+1

-  支持输出结果设置，包括翻转、取反

-  支持初始值自定义

-  支持输入可选择取反

模块结构框图
~~~~~~

CRC循环冗余检验结构框图如图 6‑62所示：

|CRC计算单002|

图 6‑62 CRC结构框图

功能描述
~~~~

计算步骤
^^^^

-  根据需求，通过CR寄存器选择CRC算法、输入数据有效位宽、输出结果

-  根据需求，通过INIVAL寄存器设置CRC初始值

-  通过CR寄存器使能CRC计算

-  通过DATAIN寄存器向CRC计算单元输入要计算的数据

-  通过RESULT寄存器读取计算结果

寄存器映射
~~~~~

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 名称   |
     - | 偏移 |
     - |
       |
        |
        |
     - |

        |
        |
     - 描述                       | | | |

   * - CRCBASE：0 |x40002800
     - |
     -
     -
     -

   * - CR
     - 0x00
     -
     - 0x 00000
     - CRC状态控制寄存器          |

   * - DATAIN
     - 0x04
     -
     - 0x 00000
     - CRC数据输入寄存器          |

   * - INIVAL
     - 0x08
     -
     - 0x 00000
     - CRC初始值设置寄存器        |

   * - RESULT
     - 0x0C
     -
     - 0x 00000
     - CRC结果输出寄存器          |


寄存器描述
~~~~~

控制寄存器CR
^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - CR
     - 0x00
     -
     - 0 000000
     - CRC状态控制寄存器          |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     - IBIT
     -
     - POLY

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - POLY
     - ONOT
     - OREV
     -
     - INOT
     - IREV
     -
     - EN


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:11
     - -
     - -

   * - 10:9
     - IBIT
     - CRC输入数据有效位数寄存器                   |

       00：32位输入数据有效                        |

       01：低16位输入数据有效                      |

       10：低8位输入数据有效                       |

       11：保留                                    |

   * - 8:7
     - POLY
     - CRC算法选择寄存器                           |

       00：x^16+x^12+x^5+1                         |

       01：x^8+x^2+x+1                             |

       10：x^16+x^15+x^2+1                         |

       11：x^32+x^26+x^23+x^                       | x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1

   * - 6
     - ONOT
     - 输出结果是否取反寄存器                      |

       1：输出结果取反                             |

       0：输出结果不需要取反                       |

   * - 5:4
     - OREV
     - 输出结果是否翻转寄存器                      |

       00：bit顺序不变                             |

       01：bit顺序完全翻转（32位数据宽度31:0 ->    | 0:31；16位数据宽度15:0 ->                   | 0:15；8位数据宽度7:0 -> 0:7）               |

       10：bit顺序在字节范围内翻转（32位数据宽度   | 31:0 -> 24:31, 16:23, 8:15, 0:7；16位数据宽度15:0 -> 8:15,              | 0:7；8位数据宽度同01                        |

       11：仅字节顺序翻转（32位数据宽度 31:0 ->    | 7:0,15:8,23:16,31:24；16位数据宽度15:0 ->   | 7:0,15:8；8位数据宽度同00）                 |

   * - 3
     - INOT
     - 输入数据是否取反                            |

       1：输入数据取反                             |

       0：输入数据不取反                           |

   * - 2:1
     - IREV
     - 输入数据是否翻转。                          |

       00：bit顺序不变                             |

       01：bit顺序完全翻转（32位数据宽度31:0 ->    | 0:31；16位数据宽度15:0 ->                   | 0:15；8位数据宽度7:0 -> 0:7）               |

       10：bit顺序在字节范围内翻转（32位数据宽度   | 31:0 -> 24:31, 16:23, 8:15, 0:7；16位数据宽度15:0 -> 8:15,              | 0:7；8位数据宽度同01                        |

       11：仅字节顺序翻转（32位数据宽度 31:0 ->    | 7:0,15:8,23:16,31:24；16位数据宽度15:0 ->   | 7:0,15:8；8位数据宽度同00）                 |

   * - 0
     - EN
     - CRC使能控制位                               |

       1：CRC使能                                  |

       0：CRC禁能                                  |


数据输入寄存器DATAIN
^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - DATAIN
     - 0x04
     -
     - 0 000000
     - CRC数据输入寄存器          |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - DATAIN
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - DATAIN
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - DATAIN
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - DATAIN
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:0
     - DATAIN
     - C 据输入寄存器，有效位根据CR寄存器IBIT位选择 |


初始值设置寄存器INIVAL
^^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - INIVAL
     - 0x08
     -
     - 0 000000
     - CRC初始值设置寄存器        |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - INIVAL
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - INIVAL
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - INIVAL
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - INIVAL
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:0
     - INIVAL
     - CRC初始值寄存器                             |


结果输出寄存器RESULT
^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - RESULT
     - 0x0C
     -
     - 0 000000
     - CRC结果输出寄存器          |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - RESULT
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - RESULT
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - RESULT
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:0
     - RESULT
     - C 果输出寄存器，有效位根据CR寄存器POLY位选择 |

       当POLY为：                                  |

       00：低16位有效                              |

       01：低8位有效                               |

       10：低16位有效                              |

       11：32位有效                                |


.. |CRC计算单002| image:: media\CRC计算单002.emf
