.. vim: syntax=rst

I2C总线控制器（I2C）
-------------

概述
~~

SWM241系列所有型号I2C操作均相同，不同型号I2C模块数量可能不同。使用前需使能对应I2C模块时钟。

I2C模块提供了MASTER模式及SLAVE模式，基本操作及配置详见功能描述章节。

特性
~~

-  支持通过APB总线进行配置

-  支持master、slave两种模式

-  支持I2C输入信号数字滤波

-  支持Standard-mode（100kbps）、Fast-mode（400kbps）、Fast-mode Plus（1Mbps）、High-speed mode（3.4Mbps）

-  SCL/SDA线上数据可读

-  Master模式特性：

   -  支持clock synchronization

   -  支持多master总线仲裁

   -  支持clock stretching，slave器件可通过拉低SCL来hold总线

   -  支持SCL LOW超时报警

   -  支持读、写操作

   -  支持发出的SCL时钟周期最大为（2^17）\*pclk

   -  SCL时钟占空比可配置

-  Slave模式特性：

   -  支持多slave

   -  支持7位、10位两种地址模式

   -  支持地址mask，一个slave器件可以占用多个地址

      -  7位地址模式，一个slave器件最多可占用128个地址

      -  10位地址模式，一个slave器件最多可占用256个地址

   -  支持clock stretching，slave器件可通过拉低SCL来hold总线

   -  支持读、写操作

模块结构框图
~~~~~~

|I2C总线控002|

图 6‑32 I2C模块结构框图

*注：I2CxDATA主机模式下是MSTDAT，从机模式下写入、读出时分别是SLVTX、SLVRX*

功能描述
~~~~

总线设置

I2C总线采用串行数据线(SDA)和串行时钟线(SCL)传输数据。I2C总线的设备端口为开漏输出，必须在接口外接上拉电阻。

数据在主从设备之间通过SCL时钟信号在SDA数据线上逐字节同步传输。每一个SCL时钟脉冲发送一位数据，高位在前。每发送一个字节的数据产生一个应答信号。在时钟线SCL高电平期间对数据的每一位进行采样。数据线SDA在时钟线SCL为低改变，在时钟线SCL为高电平时保持稳定。

协议介绍

通常情况下，一个标准的通信包含四个部分：开始信号、从机地址、数据传输、停止信号。如图 6‑33所示：

|I2C总线控003|

图 6‑33 I2C通信示意图

起始位发送

当总线空闲时，表示没有主机设备占用总线（SCL和SDA都保持高电平），主机可以通过发送一个起始信号启动传输。启动信号，通常被称为S位。SCL为高电平时，SDA由高电平向低电平跳变。启动信号表示开始新的数据传输。

重新启动是没有先产生一个停止信号的启动信号。主机使用此方法与另一个从机或者在不释放总线的情况下与相同的从机改变数据传输方向（例如从写入设备到写入设备的转换）。

当命令寄存器的STA位被置位，同时RD或者WR位被置位时，系统核心产生一个启动信号。根据SCLK的当前的不同状态，生成启动信号或重复启动信号。

地址发送

在开始信号后，由主机传输的第一个字节数据是从机地址。包含7位的从设备地址和1位的RW指示位。RW指示位信号表示与从机的数据传输方向。在系统中的从机不可以具有相同的地址。只有从机地址和主机发送的地址匹配时才能产生一个应答位（在第九个时钟周期拉低SDA）进行响应。对于10位从机地址，模块通过产生两个从机
地址支持。

发送从机地址为一次写操作，在传输寄存器中保存从机地址并对WR位置位，从机地址将被发送到总线上。

数据发送

一旦成功取得了从机地址，主机就可以通过R/W位控制逐字节的发送数据。每传输一个字节都需要在第九个时钟周期产生一个应答位。

如果从机信号无效，主机可以生成一个停止信号中止数据传输或生成重复启动的信号并开始一个新的传输周期。如果从机返回一个NACK信号，主机就会产生一个停止信号放弃数据传输，或者产生一个重新启动信号开始一个新的传输周期。

如果主机作为接收设备，没有应答从机，从机就会释放SDA，主机产生停止信号或者重新启动信号。

向从机写入数据，需把将要发送的数据存入传输寄存器中并设置WR位。从从机中读取数据，需设置RD位。在数据传输过程中系统核心设置TIP提示标志，指示传输正在进行。当传输完成后TIP提示标志会自动清除。当中断使能时，中断标志位IF被置位，并产生中断。当中断标志位IF被置位后，接收寄存器收到有效数据。当TI
P提示标志复位后，用户可以发出新的写入或读取命令。

停止位发送

主机可以通过生成一个停止信号终止通信。停止信号通常被称为P位，被定义为SCL为高电平时，SDA由低电平向高电平跳变。

Master SCL周期配置
^^^^^^^^^^^^^^

|I2C总线控004|

图 6‑34 Master SCL周期配置示意图

主机发送模式
^^^^^^

I2C模块作为主机，初始化配置操作如下：

-  配置PORTCON模块中端口对应PORTX_FUNC寄存器，将指定引脚切换为功能复用

-  配置PORTCON模块中端口对应PULLU_x上拉使能寄存器，使能端口内部上拉电阻（也可使用外部上拉电阻）

-  配置PORTCON模块中端口对应INEN_x输入使能寄存器，使能I2C数据线输入功能

-  配置CR寄存器的EN位，关闭I2C模块，确保配置寄存器过程中模块未工作

-  配置CR寄存器的MASTER位，将I2C模块设置为主机模式

-  配置CR寄存器的EN位，I2C模块总线使能

-  设置时序配置寄存器CLK，假设pclk=48M，希望I2C工作在Standard-mode（100kbps）速度下，则每个SCL 480个pclk，可以设置SCLL=0Xa0，SCLH =0x50，DIV=0x01

-  查询SR.BUSY，如果为1，则等待直至其变为0；如果为0，则进行下一步

-  发送Start。设置MCR.STA=1，查询该位，直至其变为0

-  发slave地址字节

-  设置TXDATA为【7位slave地址字节左移一位】

-  设置MCR.WR=1，查询该位，直至其变为0（或查询到IF的TXDONE=1（发送成功）或AL=1（仲裁丢失总线），并写1清除）

-  如果TXDONE=1，读TR.RXACK，如果该位为0，表示slave地址匹配成功

-  如果AL=1，表示本master失去总线，不能再进行后续操作，需重新查询SR.BUSY位直至1，才可以重新发送Start位，重新申请总线操作

   -  向slave发送待写数据

-  设置TXDATA，准备待写入slave的数据

-  设置MCR.WR=1，查询该位，直至其变为0（或查询到RIST的TXDONE=1，并写1清除）

-  读TR.RXACK，如果该位为0，表示写数据成功

   -  发STOP。设置MCR.STO=1，查询该位，直至其变为0

示意图如图 6‑35所示：

|I2C总线控005|

图 6‑35 Master 寄存器时序示意图

*注：*\ *图中红色部分表示软件操作*

主机接收模式
^^^^^^

I2C作为主机接收模式，需将I2C模块设置为MASTER，初始化过程与主发送模式相同。

I2C作为主机从从机接收数据操作流程如下：

-  配置PORTCON模块中端口对应PORTx_FUNC寄存器，将指定引脚切换为功能复用

-  配置PORTCON模块中端口对应PULLU_x上拉使能寄存器，使能端口内部上拉电阻（也可使用外部上拉电阻）

-  配置PORTCON模块中端口对应INEN_x输入使能寄存器，使能I2C数据线输入功能

-  配置CR寄存器的EN位，关闭I2C模块，确保配置寄存器过程中模块未工作

-  配置CR寄存器的MASTER位，将I2C模块设置为主机模式

-  配置CR寄存器的EN位，I2C模块总线使能

-  设置时序配置寄存器CLK，假设pclk=48M，希望I2C工作在Standard-mode（100kbps）速度下，则每个SCL 480个pclk，可以设置SCLL=0Xa0，SCLH =0x50，DIV=0x01

-  查询SR.BUSY，如果为1，则等待直至其变为0；如果为0，则进行下一步

-  发送Start。设置MCR.STA=1，查询该位，直至其变为0

-  发slave地址字节

-  设置TXDATA为【7位slave地址字节地址右移1位】

-  设置MCR.WR=1，查询该位，直至其变为0（或查询到IF的TXDONE=1（发送成功）或AL=1（仲裁丢失总线），并写1清除）

-  如果TXDONE=1，读TR.RXACK，如果该位为0，表示slave地址匹配成功

-  如果AL=1，表示本master失去总线，不能再进行后续操作，需重新查询SR.BUSY位直至1，才可以重新发送Start位，重新申请总线操作

   -  从slave读数据

-  设置TR.TXACK=0

-  设置MCR.RD=1，查询直到IF.RXNE=1

-  读取RXDATA，得到slave数据

-  查询MCR.RD，直至其变为0（或查询到IF.RXDONE=1，并写1清除）

   -  发STOP。设置MCR.STO=1，查询该位，直至其变为0

从发送模式
^^^^^

I2C作为从发送模式，需将I2C模块设置为SLAVE，具体软件配置操作如下：

-  配置PORTCON模块中端口对应PORTx_FUNC寄存器，将指定引脚切换为功能复用

-  配置PORTCON模块中端口对应PULLU_x上拉使能寄存器，使能端口内部上拉电阻（也可使用外部上拉电阻）

-  配置PORTCON模块中端口对应INEN_x输入使能寄存器，使能I2C数据线输入功能

-  配置CR寄存器的EN位，关闭I2C模块，确保配置寄存器过程中模块未工作

-  配置CR寄存器的MASTER位，将I2C模块设置为从机模式

-  配置CR寄存器的EN位，I2C模块总线使能

-  设置slave地址模式。SCR.ADDR10=0

-  设置slave地址SADDR

-  查询直至IF.RXSTA，表示检测到I2C总线上有start发出

-  查询直至IF.RXNE=1。表示有master选中本器件

-  如果SADDR中设置了地址mask，则读取RXDATA，判断master发送的实际地址

-  如果判断到TR.SLVRD=1，表示master希望从slave读取数据

-  准备数据，写TXDATA

-  查询直到RXDONE=1，表示之前地址匹配后，返回ACK结束

-  查询直到IF.TXE=1，就可以向TXDATA中写入新数据了

-  查询直到IF.TXDONE=1，表示数据发送完成。然后写1清除

-  查询TR.RXACK，如果为0，表示master希望继续接收数据，则可重新向TXDATA中写入数据；如果RXACK=1，表示master希望结束读操作，则设置TR.TXCLR，清除之前预准备到TXDATA中的最后一个数据。转入下一步

-  查询到IF.RXSTO，表示检测到I2C总线上有STOP发出。本次会话结束

示意图如图 6‑36所示：

|I2C总线控006|

图 6‑36 Slave 寄存器时序示意图

*注1：图中红色部分表示软件操作*

*注2：图中t1= tLOW，由CLK寄存器设置*

从接收模式
^^^^^

I2C作为从接收模式，需将I2C模块设置为SLAVE，操作流程如下：

-  配置PORTCON模块中端口对应PORTx_FUNC寄存器，将指定引脚切换为功能复用

-  配置PORTCON模块中端口对应PULLU_x上拉使能寄存器，使能端口内部上拉电阻（也可使用外部上拉电阻）

-  配置PORTCON模块中端口对应INEN_x输入使能寄存器，使能I2C数据线输入功能

-  配置CR寄存器的EN位，关闭I2C模块，确保配置寄存器过程中模块未工作

-  配置CR寄存器的MASTER位，将I2C模块设置为从机模式

-  配置CR寄存器的EN位，I2C模块总线使能

-  设置slave地址模式。SCR.ADDR10=0

-  设置slave地址SADDR

-  查询直至IF.RXSTA，表示检测到I2C总线上有start发出

-  查询直至IF.RXNE=1。表示有master选中本器件

-  如果SADDR中设置了地址mask，则读取RXDATA，判断master发送的实际地址

-  如果判断到TR.SLVWR=1，表示master希望向slave写入数据

-  查询直到RXDONE=1，表示之前地址匹配后，返回ACK结束。然后写1清除

-  设置TR.TXACK=0

-  查询直到IF.RXNE=1，表示slave接收到新数据，读取RXDATA

-  查询直到RXDONE=1，表示之前接收数据后，返回ACK结束。然后写1清除

-  可重复查询IF.RXNE位，继续接收数据，直到查询到IF.RXSTO，表示本次会话结束

时钟延展clock stretching
^^^^^^^^^^^^^^^^^^^^

clock stretching通过将SCL线拉低来暂停一个传输，直到释放SCL线为高电平,传输才继续进行。

以master-receiver，slave-transmitter为例，具体软件配置操作如下：

-  配置PORTCON模块中端口对应PORTx_FUNC寄存器，将指定引脚切换为功能复用

-  配置PORTCON模块中端口对应PULLU_x上拉使能寄存器，使能端口内部上拉电阻（也可使用外部上拉电阻）

-  配置PORTCON模块中端口对应INEN_x输入使能寄存器，使能I2C数据线输入功能

-  配置CR寄存器的EN位，关闭I2C模块，确保配置寄存器过程中模块未工作

-  配置CR寄存器的MASTER位，将I2C模块设置为主机模式

-  配置CR寄存器的EN位，I2C模块总线使能

-  设置时序配置寄存器CLK，假设pclk=48M，希望I2C工作在Standard-mode（100kbps）速度下，则每个SCL 480个pclk，可以设置SCLL=0Xa0，SCLH =0x50，DIV=0x01

-  查询SR.BUSY，如果为1，则等待直至其变为0；如果为0，则进行下一步

-  发送Start。设置MCR.STA=1，查询该位，直至其变为0

-  发slave地址字节

-  设置TXDATA为【7位slave地址字节左移一位】

-  设置MCR.WR=1，查询该位，直至其变为0（或查询到IF的TXDONE=1（发送成功）或AL=1（仲裁丢失总线），并写1清除）

-  如果TXDONE=1，读TR.RXACK，如果该位为0，表示slave地址匹配成功

-  如果AL=1，表示本master失去总线，不能再进行后续的步骤6~7，需查询直至SR.BUSY=1，才可以回到步骤4，重新发送Start位，重新申请总线操作

   -  向slave发送待写数据

-  设置TXDATA，准备待写入slave的数据

-  设置MCR.WR=1，查询该位，直至其变为0（或查询到RIST的TXDONE=1，并写1清除）

-  读TR.RXACK，如果该位为0，表示写数据成功

   -  发STOP。设置MCR.STO=1，查询该位，直至其变为0

HS-MODE
^^^^^^^

以master-transmitter为例

具体软件配置操作如下：

-  设置CR.HS=0，以普通模式发第一个字节

-  以主机发送模式的方式，先在F/S-mode下发送START和master code。在此过程中，可以进行multi-master的总线仲裁

-  如果本master获得了总线控制权。则进行如下步骤

-  设置CR.HS=1。才可以设置为高速模式

-  设置CLK寄存器。假设pclk=60M，希望I2C工作在HS-mode（3.4Mbps）速度下，则每个SCL 14个pclk，可以设置SCLL=0x0A，SCLH=0x05，DIV=0x0

-  以主机发送模式的方式，以High-speed发送Sr和slave地址（不需要再判断IF.AL位）、写数据等

以slave-receiver为例

具体软件配置操作如下：

-  根据F/S-mode速度设置CLK寄存器

-  设置CR.MASTER=0（slave），CR.EN=1，CR.HS=0

-  设置slave SCR.MCDE=1，等待master发送master code

-  查询直到RXNE=1，表示接收到master code

-  读取RXDATA中的数据，判断是multi-master中的哪一个master获得了总线。（对于single-master情况，可以省略此判断，但RXDATA中的数据需要读走，否则会影响后续地址和数据的接收）

-  设置HS-mode，后续操作在HS-mode下进行。设置CR.HS=1；设置SCR.MCDE=0

-  根据HS-mode速度设置CLK寄存器

-  设置slave地址模式及地址。设置SCR.ADDR10，并相应设置SADDR

-  查询直到IF.RXSTA=1，表示接收到Sr

-  查询直到RXNE=1，表示接收到匹配的地址

-  根据从机接收模式的操作继续后续操作，直至结束本次会话

中断清除
^^^^

此模块中中断状态位详见寄存器中各个中断标志位属性，当其中断标志位属性为R/W1C时，如需清除此标志，需在对应标志位中写1清零（R/W1C），否则中断在开启状态下会一直进入；当其中断标志位属性为AC时，表示此中断状态位会自动清零；当其中断标志位属性为RO时，表示此标志位会随着水位的变化而改变，标志位只
与其当前状态有关，不需要清除。具体详见寄存器描述。

寄存器映射
~~~~~

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 名称   |
     - | 偏移 |
     - |
       |
        |
        |
     - |

        |
        |
     - 描述                       | | | |

   * - I2C0BASE： |0x400A6000I2C1BASE： |0x400A6800
     - |     |
     -
     -
     -

   * - CR
     - 0x0
     -
     - 0x 00018
     - 通用配置寄存器             |

   * - SR
     - 0x4
     -
     - 0x 00000
     - 通用状态寄存器             |

   * - TR
     - 0x8
     -
     - 0x 00002
     - 通用传输寄存器             |

   * - RXDATA
     - 0xC
     -
     - 0x 00000
     - 接收数据寄存器             |

   * - TXDATA
     - 0x10
     -
     - 0x0 _0000
     - 发送数据寄存器             |

   * - IF
     - 0x14
     -
     - 0x 00001
     - 中断标志寄存器             |

   * - IE
     - 0x18
     -
     - 0x 00000
     - 中断使能寄存器             |

   * - MCR
     - 0x20
     -
     - 0x0 _0000
     - Master控制寄存器           |

   * - CLK
     - 0x24
     -
     - 0x 33F7F
     - 时序配置寄存器             |

   * - SCR
     - 0x30
     -
     - 0x 00008
     - Slave控制寄存器            |

   * - SADDR
     - 0x34
     -
     - 0x 00000
     - Slave地址寄存器            |


寄存器描述
~~~~~

通用配置寄存器CR
^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - CR
     - 0x0
     -
     - 0 000018
     - 通用配置寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     - DNF
     -
     -
     -
     - HS
     -
     - EN


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:7
     - -
     - -

   * - 6:3
     - DNF
     - Receive SDA、SCL数字噪声滤波（Digital Noise | Filter）                                    |

       0000：滤波不使能                            |

       0001：滤波使能，且滤波能力最大1个系统时钟   |

       ……

       1111：滤波使能，且滤波能力最大15个系统时钟  |

   * - 2
     - HS
     - High-Speed mode，仅在master模式下有效       |

       0：Standard-mode, Fast-mode, Fast-mode      | Plus。SCL为open-drain输出                   |

       1：High-Speed                               | mode。SCL为电流源上                         | 输出。Master发送STOP后，硬件自动清除本位 |

   * - 1
     - MASTER
     - 模式控制                                    |

       0：slave模式                                |

       1：master模式                               |

   * - 0
     - EN
     - i2c总线使能                                 |

       0：不使能                                   |

       1：使能                                     |


通用状态寄存器SR
^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - SR
     - 0x4
     -
     - 0 000000
     - 通用状态寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     -
     - SDA
     - SCL
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:3
     - -
     - -

   * - 2
     - SDA
     - I2C SDA状态。不受I2C总线使能影响。          |

       0：I2C SDA为低。                            |

       1：I2C SDA为高。                            |

   * - 1
     - SCL
     - I2C SCL状态。不受I2C总线使能影响。          |

       0：I2C SCL为低。                            |

       1：I2C SCL为高。                            |

   * - 0
     - BUSY
     - 总线忙状态。本位不受C                       | N位控制，当EN不使能时，仍然检测总线忙状态。 |

       0：总线不忙。                               |

       1：总线忙，I2C总线START至STOP期间有效。     |


通用传输寄存器TR
^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - TR
     - 0x8
     -
     - 0 000002
     - 通用传输寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     - S DS
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:14
     - -
     - -

   * - 13:12
     - SLVRDS
     - Slave接收到的数据类型。仅在Slave模式有效。  |

       00：RXDATA为空。                            |

       01：接收到的是地址。                        |

       10：接收到的是数据。                        |

       11：接收到的是master                        | code。仅当MCDE=1时有效。                    |

   * - 11
     - SLVSTR
     - Slave clock stretching忙状态。仅在slave模式有效。       |

       0：无clock stretching。                     |

       1：有clock stretching。                     |

   * - 10
     - SLVWR
     - Slave写状态。仅在slave模式有效。            |

       1：Slave接收到master的写请求后有效。        |

       0：                                         | ve接收到master的读请求或STOP后，自动清除。  |

   * - 9
     - SLVRD
     - Slave读状态。仅在slave模式有效。            |

       1：Slave接收到master的读请求后有效。        |

       0：                                         | ve接收到master的写请求或STOP后，自动清除。  |

   * - 8
     - SLVACT
     - Slave活跃状态。仅在slave模式有效。          |

       0：slave器件处于非活跃状态                  |

       1：s                                        | e器件处于活跃状态。地址匹配成功后本位有效； | STOP，或Sr后的地址匹配不成功，自动清除。 |

   * - 7:3
     - -
     - -

   * - 2
     - TXCLR
     - 发送数据寄存器清空。硬件自动清除。          |

       0：不清空。                                 |

       1：清空TXDATA中的数据，并更新TXE位。        |

   * - 1
     - RXACK
     - 当作为trans                                 | ter时，接收到的ACK/NACK。硬件置位，TXDONE有 | 可查询此位；接收到Sr或STOP会将此位清零。 |

       0：接收到ACK                                |

       1：接收到NACK                               |

   * - 0
     - TXACK
     - 当作为receiver时，反馈ACK/NACK。            |

       0：反馈ACK。                                |

       1：反馈NACK。                               |

       以下情况，ACK/NACK不由本位决定：            |

       slave接收地址时，硬件自动反馈ACK/NACK。     |

       slave MCDE有效，接收到master                | code时，硬件自动返回NACK。                  |

       slave接收溢出时，硬件自动反馈NACK。         |


接收数据寄存器RXDATA
^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - RXDATA
     - 0xC
     -
     - 0 000000
     - 接收数据寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - RXDATA
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:8
     - -
     - -

   * - 7:0
     - RXDATA
     - 接收数据                                    | 。RXNE为1，表示本寄存器中存在有效数据。  |

       在完成数据接                                | 包含ACK/NACK发送）的时刻，更新此寄存器。 |

       slave接收地址字节情况，参见RXDONE位说明。   |


发送数据寄存器TXDATA
^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - TXDATA
     - 0x10
     -
     - 0 000000
     - 发送数据寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - TXDATA
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:8
     - -
     - -

   * - 7:0
     - TXDATA
     - 发送数据                                    | 。TXE为0，表示本寄存器中存在待发送数据。 |


中断标志寄存器IF
^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - IF
     - 0x14
     -
     - 0 000001
     - 中断标志寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     - AL

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     -
     -
     -
     - TXE


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:18
     - -
     - -

   * - 17
     - MLTO
     - Master SCL LOW超时。写1清除。仅在master模式有效        |

       0：未超时                                   |

       1：超时。SCL                                | LOW时间超过1024个由CLK寄存器设置的SCL       | LOW时间                                     |

       【对于golden model，SCL                     | LOW超时时间由MLTO_LIM设置】                 |

   * - 16
     - AL
     - M er仲裁丢失总线。写1清除。仅在master模式有效 |

       0：无仲裁丢失总线控制权                     |

       1：仲裁丢失总线控制权                       |

   * - 15:10
     - -
     - -

   * - 9
     - RXSTO
     - S e检测到STOP。写1清除。仅在slave模式下有效。 |

       0：slave未检测到STOP                        |

       1：slave检测到STOP                          |

   * - 8
     - RXSTA
     -

   * - 7:5
     - -
     - -

   * - 4
     - RXDONE
     - 接收结束。写1清除，包含ACK/NACK时间         |

       0：接收未结束                               |

       1：接收结束                                 |

       Slave接收情况说明                           |

       Slave器件7位地址模式下，slave地址字节       | /W位）接收完成，若地址匹配，则生成此中断  |

       Slave器件10位地                             | 下，slave地址的第2字节（ADDR[7:0]）接收  | 若10位地址匹配，则生成此中断；跟在repeat | START之后的slave地址第1字节，若地址8、9位   |
       则生成此中断；跟在START之后的第1字节接收 | ，即使ADDR[9:8]匹配，也不会生成此中断。  |

       Slave模式，MCDE=1，接收到master             | code时，会生成此中断。                      |

   * - 3
     - TXDONE
     - 发送结束。写1清除，包含ACK/NACK时间         |

       0：发送未结束，或没有发送                   |

       1：发送结束                                 |

       说明：当master                              | 送字节发生仲裁丢失总线时，不产生本中断。 |

   * - 2
     - RXOV
     - 接收数据寄存器溢出。软件                    | 除。（更新的时刻点，不包含ACK/NACK发送）  |

       0：无溢出                                   |

       1：当RXDATA非空时，又接收到                 | 节，会产生溢出。溢出发生时，新数据丢失。 |

       说明：对于slave模式，如果STRE位             | 当接收数据寄存器非空，且又接收到新的字节 | ave器件会拉低SCL信号，直到RXDATA中的旧数被 | 再把新数存到RXDATA中，此情况不会产生溢出 |

   * - 1
     - RXNE
     - 接收数据寄存器非空                          |

       0：接收数据寄存器空，不存在未读取的接收数据 |

       1：接收数据寄存器非空，存在未读取的接收数据 |

       在接收完                                    | 时刻更新此位（不包含ACK/NACK发送时间）。 |

       如果新数据接收                              | ，旧数据未及时读取，分如下几种情况处理： |

       Master模式：                                |

       新数据丢失。同时置位RXD_OV位。              |

       Slave模式：                                 |

       A．STRE=0：新                               | 失。同时置位RXD_OV位，硬件自动反馈NACK。 |

       B．STRE=1：正常返回                         | ，然后在master发送下一个字节前，slave将SCL  | hold在低电平，直到旧数据被读走后，          | 数据更新到RXDATA寄存器中。最后释放SCL。  |

   * - 0
     - TXE
     - 发送数据寄存器空                            |

       0：发送数据寄存器非空，不允许写TXDATA寄存器 |

       1：发送数据寄存器空，允许写TXDATA寄存器     |

       在发送数据开始的时刻，发送数据被            | 走后，此位被更新为1（此时TXDONE仍为0）。 |

       向TXDATA寄存器写入新数据，可清除此位。      |


中断使能寄存器IE
^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - IE
     - 0x18
     -
     - 0 000000
     - 中断使能寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     - AL

   * - 12
     - 11
     - 10
     - 9
     - 8
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     -
     -
     -
     - TXE


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:18
     - -
     - -

   * - 17
     - MLTO
     - Master SCL LOW超时中断使能                  |

       0：不使能                                   |

       1：使能                                     |

   * - 16
     - AL
     - Master仲裁丢失总线中断使能                  |

       0：不使能                                   |

       1：使能                                     |

   * - 15:10
     - -
     - -

   * - 9
     - RXSTO
     - Slave检测到STOP中断使能                     |

       0：不使能                                   |

       1：使能                                     |

   * - 8
     - RXSTA
     - Slave检测到START中断使能                    |

       0：不使能                                   |

       1：使能                                     |

   * - 7:5
     - -
     - -

   * - 4
     - RXDONE
     - 接收数据结束中断使能                        |

       0：不使能                                   |

       1：使能                                     |

   * - 3
     - TXDONE
     - 发送数据结束中断使能                        |

       0：不使能                                   |

       1：使能                                     |

   * - 2
     - RXOV
     - 接收数据寄存器溢出中断使能                  |

       0：不使能                                   |

       1：使能                                     |

   * - 1
     - RXNE
     - 接收数据寄存器非空中断使能                  |

       0：不使能                                   |

       1：使能                                     |

   * - 0
     - TXE
     - 发送数据寄存器空中断使能                    |

       0：不使能                                   |

       1：使能                                     |


Master控制寄存器MCR
^^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - MCR
     - 0x20
     -
     - 0 000000
     - Master控制寄存器           |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     - STO
     - WR
     - RD
     - STA


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:5
     - -
     - -

   * - 3
     - STO
     - 写1，产生STOP，完成后自动清零。             |

   * - 2
     - WR
     - 写1，发送TX                                 | A中数据，完成后（含ACK/NACK时间）自动清零。 |

       向本位写                                    | 要求TXDATA不能为空。否则，本位无法设置。  |

       注意：WR与RD位不能同时写1.
       |

   * - 1
     - RD
     - 写1，接收数据                               | DATA中，完成后（含ACK/NACK时间）自动清零。 |

   * - 0
     - STA
     - 写1，产生START，完成后自动清零。            |

       注：允许STA和WR同时置位，优先发送START。    |


时序配置寄存器CLK
^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - CLK
     - 0x24
     -
     - 0 033F7F
     - 时序配置寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - DIV
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - SCLH
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - SCLL
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:28
     - -
     - -

   * - 27:24
     - SDAH
     -

   * - 23:16
     - DIV
     - 时钟预分                                    | 见SCLH和SCLL描述。（仅对Master模式有效） |

       0：1分频                                    |

       1：2分频                                    |

       2：3分频                                    |

       ……

       255：256分频                                |

   * - 15:8
     - SCLH
     -

   * - 7:0
     - SCLL
     - SCL时钟低电平时间配置。（对Master模         | ；在slave模式下，如果使能了STRETCH功能， | DS配置为0，则需要配置本寄存器。在slave写T  | TA后，延迟本寄存器设置的时间，再释放SCL。） |

       tLOW=( (SCLL+1) \* (DIV+1) + SDAH + 5) \* Tpclk

       SCL的周期为tHIGH+tLOW。                     |

       推荐SCLH与SCLL的比例为1:2。                 |


*注：示意图如图 6‑34所示*

Slave控制寄存器SCR
^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - SCR
     - 0x30
     -
     - 0 000008
     - Slave控制寄存器            |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:4
     - -
     - -

   * - 3
     - ASDS
     -

   * - 2
     - STRE
     - Clock stretching使能控制。                  |

       0：Clock stretching不使能。                 |

       1：Clock stretching使能。                   |

       （slave作为                                 | eiver时，当接收到新数据，但旧数据未被及时读 | XNE=1）：SLVSTR变有效，在返回ACK后，将SCL | hold在低电平，直到                          |
       被读取后，把新数据更新到RXDATA中，同时S  | TR变无效，再释放SCL，开始下一个数据的接收。 |

       slave作为transmitter时                      | 送结束（TXDONE=1，含接收ACK/NACK时间）， | 据未准备好（TXE=1）：SLVSTR变有效，将SCL | ho 低电平，直到新数据准备好，延迟SCLL时间后， |
       STR变无效，再释放SCL，开始新数据的发送。）  |

   * - 1
     - MCDE
     - Master Code Detect Enable.

       0：不检测master code。                      |

       1：检测master code。                        |

       本位有效时，slave在START之后检测到master    | code，会生成RXDONE中断，并硬件设置          | RDS为11。软件应保证slave地址设置不与master  | code冲突。                                  |

   * - 0
     - ADDR10
     - slave地址模式控制。                         |

       0：7位地址模式                              |

       1：10位地址模式                             |


Slave地址寄存器SADDR
^^^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - SADDR
     - 0x34
     -
     - 0 000000
     - Slave地址寄存器            |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - MASK_ADDR7
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - ADDR7
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:24
     - -
     - -

   * - 23:17
     - MASK7
     - Slave对应地址位掩码。                       |

       0：不掩码。                                 |

       1：掩码对应位地址。掩码                     | 件匹配slave地址时，忽略被掩码的地址位。  |

       对于10位地址模式，RXDATA                    | ADDR[7:0]，所以不支持对ADDR[9:8]的mask。 |

   * - 16
     - MASK10
     - Slave对应地址位掩码。                       |

   * - 15:10
     - -
     - -

   * - 9:8
     - ADDR10
     - 10位地址模式：地址bit9~bit8                 |

   * - 7:1
     - ADDR7
     - 地址bit7~bit1                               |

   * - 0
     - ADDR0
     - 10位地址模式：地址bit0                      |


.. |I2C总线控002| image:: media\I2C总线控002.emf
.. |I2C总线控003| image:: media\I2C总线控003.emf
.. |I2C总线控004| image:: media\I2C总线控004.emf
.. |I2C总线控005| image:: media\I2C总线控005.emf
.. |I2C总线控006| image:: media\I2C总线控006.emf
