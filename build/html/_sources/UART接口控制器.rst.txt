.. vim: syntax=rst

UART接口控制器（UART）
---------------

概述
~~

不同型号具备UART数量可能不同。使用前需使能对应UART模块时钟。

UART模块支持波特率配置，最高速度可达到模块时钟16分频。具备深度为8的FIFO，同时提供了多种中断供选择。

 特性
 ~~

-  支持标准的UART协议

-  支持全双工模式

-  支持波特率可配置

-  支持8位/9位数据格式选择

-  可配置的奇偶校验位

-  支持1位/2位停止位选择

-  支持波特率自动调整

-  深度为8字节的发送和接收FIFO

-  支持break操作自动检测

-  支持接收超时中断

-  支持LIN模式

-  支持发送/接收数据LSB/MSB选择

-  支持发送/接收数据电平反向

模块结构框图
~~~~~~

|UART接口002|

图 6‑21 UART模块结构图

功能描述
~~~~

数据格式及波特率配置
^^^^^^^^^^

数据位

可以通过向CTRL寄存器的NINEBIT位写1，选择支持9位数据模式。该位默认为0，即8位数据模式

奇偶校验位

CTRL寄存器PAREN位使能奇偶校验，PARMD 位选择奇偶校验模式，分别有奇校验、偶校验、常1、常0等四种校验格式，根据需求可以灵活选择配置具体看下表：

.. list-table::
   :widths: 25 25 25 25
   :header-rows: 0


   * - 校验类型     |
     - CTRL[21]     |
     - CTRL[20]     |
     - CTRL[19]   |

   * - 无校验       |
     - x            |
     - x            |
     - 0          |

   * - 奇校验       |
     - 0            |
     - 0            |
     - 1          |

   * - 偶校验       |
     - 0            |
     - 1            |
     - 1          |

   * - 校验位常为1  |
     - |
     - |
     - |

   * - 校验位常为0  |
     - |
     - |
     - |


停止位

停止位位数默认为1位，可通过向CTRL寄存器STOP2B位选择停止位位数为2位。

字符格式如图 6‑22所示：

|UART接口003|

图 6‑22 UART字符格式

使能波特率配置后，对BAUD寄存器BAUD位写入特定值，配置波特率。

配置方式如下：

目标波特率 = 系统主时钟 / (16 \* (BAUD+ FRAC + 1))

波特率配置完成后，需将CTRL寄存器EN位使能，使能UART模块，使波特率配置生效。

自动波特率功能
^^^^^^^

UART自动波特率功能可以自动测量UART_RX脚输入数据的波特率。当自动波特率测量完成后，测量的结果保存在BAUD寄存器的BAUD位。

自动波特率的检测时间，从UART_RX数据的起始位到第一个上升沿的时间，通过配置BAUD寄存器ABRBIT位设定即2 :sup:`ABRDBITS`\
位时间。配置BAUD寄存器ABREN位，使能自动波特率检测功能。初始阶段，RXD保持为1，一旦检测到下降沿，即为接收到起始位，自动波特率计数器开始计数，当检测到第一个上升沿时，自动波特率计数器停止计数。

自动波特率计数值除以检测时间长度的结果保存在BAUD位，ABREN位清零。

当自动波特率计数器溢出，BAUD寄存器的ABRERR置1，调节失败，写1清零。

配置流程：

-  选择检测时间的长度，配置BAUD寄存器ABRBIT位

-  配置BAUD寄存器ABREN位，使能自动波特率检测功能

-  等待接收调节的数据，查看BAUD寄存器ABREN位，清零表示波特率检测完成

-  查看BAUD寄存器ABRERR位，查看自动调节波特率时计数器是否溢出

-  如果数据未溢出，则表示成功

|UART接口004|

图 6‑23 自动波特率示意图

FIFO及中断设置
^^^^^^^^^

UART模块包含深度为8的接收FIFO及发送FIFO，同时提供了与FIFO相配合的状态位中断，供操作使用。使用方式如下：

-  通过FIFO寄存器配置中断触发条件，并获取FIFO内部数据数量

   -  TXTHR位设置发送FIFO阈值，当TXFIFO中数据量不超过设置值时，触发中断。当TXTHR位配置为0且使能CTRL中TXIE发送端FIFO中断时，UART使能后即触发发送中断

   -  RXTHR位设置接收FIFO阈值，当RXFIFO中数据量不小于设置值时，触发中断。当RXTHR位配置为0且使能CTRL中RXIE发送端FIFO中断时，UART使能后接收到1个数据值即触发接收中断

-  通过CTRL寄存器RXIE位及TXIE位，使能FIFO中断

-  通过查询BAUD寄存器RXTHRF或TXTHRF位获取FIFO状态

数据发送及接收
^^^^^^^

将控制及状态寄存器（CTRL）EN位置1后，对应UART模块使能

对于发送操作：

-  向DATA寄存器写入数据，数据发送至UART_TX线

-  通过读取CTRL寄存器TXIDLE位状态，获取当前发送状态

-  可通过读取BAUD寄存器TXD位，获取当前TX线实时状态

对于接收操作：

-  通过判断DATA寄存器中VAILD位，判断是否接收到有效数据

-  读取DATA寄存器，可获得UART_RX线接收的数据

-  可通过读取BAUD寄存器RXD位，获取当前RX线实时状态

-  可设置接收超时中断。使能后，当接收相邻两个数据间隔时长超过设置时长时，将触发中断

电平反向
^^^^

通过设置CFG寄存器的TXINV位及RXINV位，分别对TX和RX线设置取反，设置后电平立刻生效

大小端控制
^^^^^

通过CFG寄存器的MSBF位进行配置，设置数据传输是从高位(MSB)开始传输还是从低位(LSB)开始传输。

LIN Fram
^^^^^^^^

UART支持LIN功能。在主机模式下，支持LIN_BREAK产生，在 从机模式下，支持LIN_BREAK检测。报文是以报文帧的格式传输和发送。报文帧 由主机节点发送的报文头和从机发送的应答组成。报文帧的报头包括break域，同步域和帧识别码（帧ID）。帧
ID仅作为定义帧的用途，从机负责响应相关的帧ID,响应由数据域和校验域组成。

|UART接口005|

图 6‑24 LIN Fram示意图

当使用LIN Fram时，可通过LINCR寄存器进行相关设置。

发送操作：

与正常的UART发送相比，选用LIN Fram发送时，除了基本操作步骤外，还需：

-  通过CTRL寄存器将GENBRK位置1，拉低TX线。该位保持为1时，TX将持续保持低电平，直至该位清除

-  通过LINCR寄存器将GENBRKIE位置1，使能Break信号发送完成中断

-  设置LINCR寄存器GENBRK，发送Break信号至总线

-  Break信号发送完成后，中断产生，LINCR寄存器GENBRKIF位置1。可通过读此寄存器判断是否发送完成

注意：发送BREAK信号时，向DATA寄存器写入数据，数据同样会执行发送操作，但数据电平不会体现到TX线上，除非发送数据期间清除CTRL寄存器GENBRK位。

接收操作：

与正常的UART接收相比，选用LIN Fram接收时，除了基本操作步骤外，还需：

-  通过LINCR寄存器将BRKIE位置1，使能检测到Break信号中断

-  设置CTRL寄存器BRKIE位及BRKDET位，当RX线接收到Break信号时，将触发中断

-  检测到Break信号并产生中断后，LINCR寄存器BRKDETIE位置1。可通过读此寄存器判断是否检测到Break信号

当Break信号不够长时，丢弃Break，BRKDETIF不置1，如图 6‑25所示：

|UART接口006|

图 6‑25 Break信号不够长示意图

当Break信号恰好够长时，等接收线上收到高电平后，检测到Break，BRKDETIF置1，如图 6‑26所示：

|UART接口007|

图 6‑26 Break信号恰好够长示意图

当Break信号足够长时，等接收线上收到高电平后，检测到Break，LINBRKST置1，如图 6‑27所示：

|UART接口008|

图 6‑27 Break信号足够长示意图

**硬件流控**

硬件流控（RTS/CTS）制主要功能为防止串口传输时出现丢失数据的现象，使用流控制功能时需将通信两端的RTS和CTS对应相连，通过RTS和CTS可以控制两个串口设备间的串行数据流。

**RTS流控制**

RTS为输出信号，通过自动流控控制寄存器使能该信号并设置有效极性（高电平/低电平）以及触发阈值，当RTS为有效电平时表示可以接收数据，当接收数据达到所设置的阈值时，RTS无效。

**CTS流控制**

CTS为输入信号，通过自动流控控制寄存器使能该信号并设置有效极性（高电平/低电平），当RTS为有效电平时表示可以发送数据。

|UART接口009|

图 6‑28硬件流控

接收中断与超时中断
^^^^^^^^^

以如下配置为例：

方式一：FIFO清空后，不产生超时中断

-  配置FIFO寄存器RXLVL位为3，即RXThreshold=3，接收FIFO取值3

-  配置CTRL寄存器RXIE位为1，即RXThresholdIEn=1，配置接收FIFO中的个数> RXThreshold时触发中断

-  配置TOCR寄存器TIME位为10，即TimeoutTime = 10，超时时长 = TimeoutTime/(Baudrate/10) 秒

-  配置UARTx.TOCR寄存器MODE位为0，FIFO清空后，不产生超时中断

-  配置CTRL寄存器TOIE位为1，即TimeoutIEn = 1，超时中断，超过TimeoutTime/(Baudrate/10) 秒没有在RX线上接收到数据且接收FIFO中数据个数不为零时可触发中断

对方发送8个数据

|UART接口010|

图 6‑29 对方发送8个数据接收FIFO示意图

每接收到一个数据，RX FIFO中数据个数加一，当RX FIFO中数据个数大于RXThreshold时，触发接收中断。

   **对方发送9个数据**

   |UART接口011|

图 6‑30 对方发送9个数据接收FIFO示意图

只有当接收FIFO中有数据，且在指定时间内未接收到新的数据时，才会触发超时中断。

若应用中希望通过数据间时间间隔作为帧间隔依据，即不管对方发送过来多少个数据，最后都能产生超时中断，可以通过在接收ISR中从RX FIFO中读取数据时总是少读一个（即让一个数据留在RX FIFO中）来实现。

**方式二：无论FIFO是否清空，间隔指定时间后均产生超时中断**

-  配置FIFO寄存器RXLVL位为3，即RXThreshold=3，接收FIFO取值3

-  配置CTRL寄存器RXIE位为1，即RXThresholdIEn=1，配置接收FIFO中的个数> RXThreshold时触发中断

-  配置TOCR寄存器TIME位为10，即TimeoutTime = 10，超时时长 = TimeoutTime/(Baudrate/10) 秒

-  配置UARTx.TOCR寄存器MODE位为1，无论FIFO是否清空，间隔指定时间后均产生超时中断

-  配置CTRL寄存器TOIE位为1，即TimeoutIEn = 1，超时中断，超过 TimeoutTime/(Baudrate/10) 秒没有在RX线上接收到数据时可触发中断

无论接收FIFO中是否有数据，只要在指定时间内未接收到新的数据时，就会触发超时中断。

发送中断
^^^^

以如下配置为例：

-  配置FIFO寄存器TXLVL位为3，即TXThreshold = 4，发送FIFO取值4

-  配置CTRL寄存器TXIE位为1，即TXThresholdIEn = 1，配置发送FIFO中的个数> TXThreshold时触发中断

|UART接口012|

图 6‑31 发送FIFO示意图

每发送出一个数据，TX FIFO中数据个数减1，当TX FIFO中数据个数小于等于TXThreshold时，触发发送中断。

如果初始化时TX FIFO中数据个数为零，则开启发送中断后会立即触发发送中断。建议在发送FIFO填入数据后再开启发送中断。

中断清除
^^^^

此模块中中断状态位详见寄存器中各个中断标志位属性，当其中断标志位属性为R/W1C时，如需清除此标志，需在对应标志位中写1清零（R/W1C），否则中断在开启状态下会一直进入；当其中断标志位属性为AC时，表示此中断状态位会自动清零；当其中断标志位属性为RO时，表示此标志位会随着水位的变化而改变，标志位只
与其当前状态有关，不需要清除。具体详见寄存器描述。

寄存器映射
~~~~~

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 名称   |
     - | 偏移 |
     - |
       |
        |
        |
     - |

        |
        |
     - 描述                       | | | |

   * - UART0BASE： |0x40042000UART1BASE： |0x40042800UART2BASE： |0x40043000UART3BASE： |0x40043800
     - |     |     |     |
     -
     -
     -

   * - DATA
     - 0x00
     -
     - 0x 00000
     - UART数据寄存器             |

   * - CTRL
     - 0x04
     -
     - 0x 00001
     - UART控制及状态寄存器       |

   * - BAUD
     - 0x08
     -
     - 0x 04000
     - UART波特率控制寄存器       |

   * - FIFO
     - 0x0C
     -
     - 0x 00000
     - UART数据队列寄存器         |

   * - LINCR
     - 0x10
     -
     - 0x 00000
     - LIN Frame控制寄存器        |

   * - CTSCR/RTSCR
     - 0x14
     -
     - 0x 00000
     - 自动流控控制寄存器         |

   * - CFG
     - 0x18
     -
     - 0x 00335
     - CFG 寄存器                 |

   * - TOCR
     - 0x1C
     -
     - 0x 00000
     - 接收超时控制寄存器         |


寄存器描述
~~~~~

数据接口寄存器DATA
^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - DATA
     - 0x00
     -
     - 0 000000
     - UART数据寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - DATA
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:11
     - -
     - -

   * - 10
     - PARERR
     - 当前读回的的数据是否存在校验错误，RO        |

       1：存在                                     |

       0：不存在                                   |

   * - 9
     - VALID
     - 数据有效位，RO                              |

       1：DATA字段有有效的接收数据                 |

       0：DATA字段无有效的接收数据                 |

       当DATA字段有有效                            | 数据时，该位硬件置1，读取数据后自动清零  |

   * - 8:0
     - DATA
     - UART数据位                                  |

       读操作：返回缓存中接收到的数据              |

       写操作：将待发送的数据写入缓存中            |


控制及状态寄存器CTRL
^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - CTRL
     - 0x04
     -
     - 0 000001
     - UART控制及状态寄存器       |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - STOP2B
     -
     -
     -
     -
     - N BIT
     - G RK
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - BRKDET
     - TOIE
     - -
     -
     -
     -
     - EN
     - -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     - TXDOIE
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:24
     - -
     - -

   * - 23:22
     - STOP2B
     - 停止位模式                                  |

       00：1位                                     |

       01：2位                                     |

       1x：保留                                    |

   * - 21:20
     - PARMD
     - 奇偶校验位模式                              |

       00：奇校验                                  |

       01：偶校验                                  |

       10：常1                                     |

       11：常0                                     |

   * - 19
     - PAREN
     - 奇偶校验使能位                              |

       1：使能                                     |

       0：禁能                                     |

   * - 18
     - NINEBIT
     - 数据位模式                                  |

       1：9位数据位                                |

       0：8位数据位                                |

   * - 17
     - GENBRK
     - Generate LIN Break，发送LIN Break           |

       0：正常发送数据                             |

       1：将UART_TX_OUT管脚拉低                    |

   * - 16
     - BRKIE
     - LIN Break Detect 中断使能                   |


       接收到BREAK时，BREAKDET状态反应到中断输出 |

       0：接收到BREAK时，不产生中断信号            |

   * - 15
     - BRKDET
     - LIN Break Detect，检测到LIN                 | Break，即RX线上检测到连续11位低电平         |

       1：接收到BREAK                              |

       0：没有接收到BREAK                          |

   * - 14
     - TOIE
     - 1：超时产生中断                             |

       0：超时不产生中断                           |

   * - 13:11
     - -
     - -

   * - 10
     - LOOP
     -

   * - 9
     - EN
     - UART模块使能位                              |

       1：使能                                     |

       0：禁能                                     |

   * - 8:7
     - -
     - -

   * - 6
     - TXDOIE
     - 发送完成中断使能位                          |

       1：使能                                     |

       0：禁能                                     |

   * - 5
     - RXOV
     - 接收端FIFO溢出标志位，W1C                   |

       1：接收FIFO溢出                             |

       0：接收FIFO没有溢出                         |

   * - 4
     - RXIE
     - 接收端FIFO中断使能位                        |

       1：接收FIFO达到预定的数量时产生中断         |

       0：接收FIFO达到预定的数量时不产生中断       |

       注                                          | FIFO中此位为0表示接收到1个数据，依次类推 |

   * - 3
     - RXNE
     - 接收端FIFO非空标志位，RO                    |

       1：非空                                     |

       0：空                                       |

   * - 2
     - TXIE
     - 发送端FIFO中断使能位                        |


       当发送FIFO内的数据少于预定的数量时产生中断 |

       0 送FIFO内的数据少于预定的数量时不产生中断 |


       送FIFO中此位为0表示发送0个数据，依次类推 |

   * - 1
     - TXFF
     - 发送端FIFO满标志位，RO                      |

       1：发送FIFO内的数据满                       |

       0：发送FIFO内的数据不满                     |

   * - 0
     - TXIDLE
     - 发送线空闲标志位，RO                        |

       1：发送线空闲                               |

       0：发送线忙，正在发送数据                   |


波特率寄存器BAUD
^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - BAUD
     - 0x08
     -
     - 0 104000
     - UART波特率控制寄存器       |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - FRAC
     -
     -
     -
     -
     -
     - A IT
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - ABREN
     - RXIF
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - RXD
     - TXD
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - BAUD
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:28
     - FRAC
     - 波特率设置                                  | 波特率分频值的小数部分）,参考BAUD的设置  |

   * - 27
     - TXDOIF
     - 发送完成中断状态位                          |

       1：中断已产生                               |

       0：中断未产生                               |

       RO，表示此标志位会随着水位的变              | 变，标志位只与其当前状态有关，不需要清除 |

   * - 26
     - ABRERR
     - 自动调节波特率时，计数器溢出中断标志，R/W1C |

       1：自动调节波特率时，计数器溢出，调节失败。 |

       0：自动调节波特率时，计数器没有溢出。       |

   * - 25:24
     - ABRBIT
     - 自动调节波特率时，检测的时间长度            |

       00：1位长度                                 |

       01：2位长度                                 |

       10：4位长度                                 |

       11：8位长度                                 |

   * - 23
     - ABREN
     - 1：打开波特率自动调节功能。                 |

       0：关闭波特率自动调节功能。                 |

       调节完成自动清零，R/W，AC                   |

   * - 22
     - RXIF
     - 1：接收数据缓存达到预定数量                 |

       0：接收数据缓存未达到预定数量               |

       RO，表示此标志位会随着水位的变              | 变，标志位只与其当前状态有关，不需要清除 |

   * - 21
     - TOIF
     - 1：接收数据超出TIME确定的时间               |

       0：接收数据未超出TIME确定的时间             |

       RO，表示此标志位会随着水位的变              | 变，标志位只与其当前状态有关，不需要清除 |

       超过 TOTIME/BAUDRAUD                        |

       接收到新的数据时若TOIE=1，此位由硬件置位 |

   * - 20
     - TXTHRF
     - TX FIFO Threshold Flag，TX                  | FIFO中数据少于设定个数（TXLVL <=            | TXTHR）时硬件置1                            |

       1：发送数据缓存达到预定数量                 |

       0：发送数据缓存未达到预定数量               |

       RO，表示此标志位会随着水位的变              | 变，标志位只与其当前状态有关，不需要清除 |

   * - 19
     - RXTHRF
     - RX FIFO Threshold Flag，RX                  | FIFO中数据达到设定个数（RXLVL >             | RXTHR）时硬件置1                            |

       1：接收数据缓存达到预定数量                 |

       0：接收数据缓存未达到预定数量               |

       RO，表示此标志位会随着水位的变              | 变，标志位只与其当前状态有关，不需要清除 |

   * - 18
     - BRKIF
     - LIN Break Detect 中断标志，检测到LIN        | Break时若BRKIE=1，此位由硬件置位            |

       当                                          | BREAK字符时，如果BREAKIRQON为1，该位为1  |

   * - 17
     - TXIF
     - 1：发送数据缓存内的数据少于预定的数量       |

       0：发送数据缓存内的数据大于预定的数量       |

       RO，表示此标志位会随着水位的变              | 变，标志位只与其当前状态有关，不需要清除 |

   * - 16
     - RXTOIF
     - 接收或超时中断标志                          |

       11：中断已产生                              |

       0：中断未产生                               |

       RO，表示此标志位会随着水位的变              | 变，标志位只与其当前状态有关，不需要清除 |

   * - 15
     - RXD
     - 直接读取接收线状态，RO                      |

   * - 14
     - TXD
     - 直接读取发送线状态，RO                      |

   * - 13:0
     - BAUD
     - 用于控制UART工作的波特率                    |

       得到的波特率为：系统主时钟 / (BAUD.BAUD     | \*16 +BAUD.FRAC + 1)

       可通过BAUD寄存器                            | C位进行波特率微调，使波特率的误差在5%以内。 |


数据队列寄存器FIFO
^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - FIFO
     - 0x0C
     -
     - 0 000000
     - UART数据队列寄存器         |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:28
     - -
     - -

   * - 27:24
     - TXTHR
     - 设置发送FIFO中断（TXIF）阈值                |


       当发送FIFO里的水位小于等于设置值时产生中断 |

       0 送FIFO里的水位小于等于设置值时不产生中断 |

   * - 23:20
     - -
     - -

   * - 19:16
     - RXTHR
     - 设置接收FIFO中断（RXIF）阈值                |

       1：当接收FIFO里的水位大于设置值时产生中断   |

       0：当接收FIFO里的水位大于设置值时不产生中断 |

   * - 15:12
     - -
     - -

   * - 11:8
     - TXLVL
     - 发送缓存的实际水位                          |

   * - 7:4
     - -
     - -

   * - 3:0
     - RXLVL
     - 接收缓存的实际水位                          |


LIN Frame控制寄存器LINCR
^^^^^^^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - LINCR
     - 0x10
     -
     - 0 000000
     - LIN Frame控制寄存器        |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     -
     - GE KIF
     - GE KIE
     - BR TIF
     - BR TIE


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:5
     - -
     - -

   * - 4
     - GENBRK
     - 发送LIN Break                               |

       1：发送                                     |

       0：不发送                                   |

       发送完成自动清零，R/W，AC                   |

   * - 3
     - GENBRKIF
     - LIN Break发送完成中断状态，R/W1C            |

       1：中断已产生                               |

       0：中断未产生                               |

   * - 2
     - GENBRKIE
     - 发送LIN Break完成中断的使能                 |

       1：使能                                     |

       0：禁能                                     |

   * - 1
     - BRKDETIF
     - 检测到LIN Break中断状态，R/W1C              |

       1：中断已产生                               |

       0：中断未产生                               |

   * - 0
     - BRKDETIE
     - 检测到LIN Break中断的使能                   |

       1：使能                                     |

       0：禁能                                     |


自动流控控制寄存器CTSCR/ RTSCR
^^^^^^^^^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - CTSCR/RTSCR
     - 0x14
     -
     - 0 000000
     - 自动流控控制寄存器         |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - CTSCR_STAT
     - RTS CR_THR
     -
     -
     - RTS POL
     - CTS POL
     - RT _EN
     - CT _EN


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:9
     - -
     - -

   * - 8
     - RTSCR_STAT
     - RTS的当前状态，RO                           |

   * - 7
     - CTSCR_STAT
     - CTS的当前状态，RO                           |

   * - 6:4
     - RTSCR_THR
     - RTS流控的触发阈值                           |

       000：触发                                   | 1byte，内部缓存的剩余空间最多只剩1个BYTE |

       001：触发阈                                 | bytes，内部缓存的剩余空间最多只剩2个BYTE  |

       010：触发阈                                 | bytes，内部缓存的剩余空间最多只剩4个BYTE  |

       011：触发阈                                 | bytes，内部缓存的剩余空间最多只剩6个BYTE  |

   * - 3
     - RTSCR_POL
     - RTS信号的极性                               |

       1：高有效，rts输出高，可以接收数据          |

       0：低有效，rts输出低，可以接收数据          |

   * - 2
     - CTSCR_POL
     - CTS信号的极性。                             |

       1：高有效，cts输入为高，可以发送数据        |

       0：低有效，cts输入为低，可以发送数据        |

   * - 1
     - RTSCR_EN
     - RTS流控使能                                 |

       1：rts信号发挥流控的作用                    |

       0：忽略rts                                  |

   * - 0
     - CTSCR_EN
     - CTS流控使能                                 |

       1：cts信号发挥流控的作用                    |

       0：忽略cts                                  |


配置寄存器CFG
^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - CFG
     - 0x18
     -
     - 0 000335
     - CFG 寄存器                 |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     - BR LEN
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - BRKRXLEN
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:12
     - -
     - -

   * - 11
     - TXINV
     - 1：发送时电平取反                           |

       0：发送时电平不取反                         |

   * - 10
     - RXINV
     - 1：接收时电平取反                           |

       0：接收时电平不取反                         |

   * - 9:6
     - BRKRXLEN
     - 接收BRK的判定长度。                         |

       0000：表示收到1 bit的0                      |

       0001：表示收到2 bit的0                      |

       N：表示收到（n+1）bit的0                    |

       1111：表示收到16bit的0                      |

   * - 5:2
     - BRKTXLEN
     - 发送BRK的长度。                             |

       0001：表示发送1bit的0                       |

       0010：表示发送2bit的0                       |

       n：表示发送n bit的0                         |

       1111：表示发送15bit的0                      |

   * - 1
     - MSBF
     - 1：发送和接收时MSB在前                      |

       0：发送和接收时LSB在前                      |

   * - 0
     - RXEN
     - 接收打开使能                                |

       1：接收打开。可接收外来的数据。             |

       0：接收                                     | 不能接收外来的数据。接收的数据一直是1。  |


接收超时控制寄存器TOCR
^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - TOCR
     - 0x1C
     -
     - 0 000000
     - 接收超时控制寄存器         |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - TIME
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:14
     - -
     - -

   * - 13
     - IFCLR
     - 超时计数器清零，写1清除中断，R/W1C          |

   * - 12
     - MODE
     - 1：                                         | IFO是否清空，间隔指定时间后均产生超时中断 |

       0：FIFO清空后，不产生超时中断               |

   * - 11:0
     - TIME
     - 接收数据超时中断的触发条件。                |

       计时单位为10个SYMBOL TIME                   |

       具体和实际波特率的设                        | 。如波特率为9600，则计时单位为1/960秒。  |


.. |UART接口002| image:: media\UART接口002.emf
.. |UART接口003| image:: media\UART接口003.emf
.. |UART接口004| image:: media\UART接口004.emf
.. |UART接口005| image:: media\UART接口005.emf
.. |UART接口006| image:: media\UART接口006.emf
.. |UART接口007| image:: media\UART接口007.emf
.. |UART接口008| image:: media\UART接口008.emf
.. |UART接口009| image:: media\UART接口009.emf
.. |UART接口010| image:: media\UART接口010.emf
.. |UART接口011| image:: media\UART接口011.emf
.. |UART接口012| image:: media\UART接口012.emf
