.. vim: syntax=rst

FLASH控制器与ISP操作
--------------

概述
~~

SWM241系列内置FLASH为串行SPI接口FLASH。通过调用IAP函数进行FLASH操作。

操作FLASH前，需要关闭中断，防止打断造成写入错误。

特性
~~

-  支持ISP程序定制

-  支持FLASH编程

-  支持BOOT自定义

-  支持加密

功能描述
~~~~

FLASH操作
^^^^^^^

FLASH操作可以通过寄存器进行操作，也可以通过IAP函数进行擦除及写入。

**寄存器操作**

-  ERASE操作：

   -  使能FLASH擦写使能位

   -  配置擦page的地址

   -  查询ERASE位等待擦完成，直至状态从1变为0，擦除完成。当Flash完成擦除操作后，方可进行其他操作

-  PROGRAM 操作：

-  使能FLASH擦写使能位

-  配置FLASH写地址，必须字对齐

-  配置FLASH要写的数据

-  查询FLASHIDLE位等待写完成

*注1：以上操作流程均可在FLASH或SRAM中执行*

*注2：每PAGE为1K，每次最少写1word*

**IAP操作**

IAP 函数作为片内驻留程序，其提供了针对flash 的相关操作IAP 函数为Thumb 代码，分为擦除函数（驻留地址为0x1000400）和写入函数（驻留地址为0x1000450），建议使用如下方式调用：

擦除函数：

定义函数类型：

typedef uint32_t (\*IAPFunc1)(uint32_t PageNum);

IAPFunc1 FLASH_PageErase = (IAPFunc1)0x1000401;

变量定义如下：

PageNum： flash 擦除目标页码，以页为单位，0 为首地址，N 为页*N 对应地址

返回值：

0：擦除成功

1：擦除失败，参数错误

调用：

Result = FLASH_PageErase(10)；

擦除第20KB 内容。Result 返回0 表示成功。

写入函数：

定义函数类型：

typedef void (\*IAPFunc2)(uint32_t faddr, uint32_t raddr, uint32_t cnt);

IAPFunc2 FLASH_PageWrite = (IAPFunc2)0x1000451;

变量定义如下：

faddr： flash 写入目标地址，字对齐

raddr： ram 写入目标地址，字对齐

cnt： 写入数量，字为单位，最大为512个字（2KB 长度）

返回值：

0：写入成功

1：写入失败，参数错误

调用：

Result = FLASH_PageWrite(0x400,0x20000400,8)；

将ram 地址0x20000400 开始的8*4 个字节写入flash 地址0x400 起始。Result 返回0 表示成功。

调用IAP 函数时，应保证栈空间剩余24 个字节（byte）以上。执行写操作前，需确认对应目标地址已经执行过擦除操作。

详细操作请参阅库函数。

ISP模式
^^^^^

ISP（在系统编程）操作说明：当芯片上电后检测到ISP引脚持续5ms 以上的高电平后，将会进入ISP（在应用编程）模式。配合上位机及串口可执行程序更新操作，默认使用B6（RX）/B5（TX）作为串口通讯使用。

详细操作请参阅应用文档及库函数。

BOOT自定义
^^^^^^^

FLASH地址空间支持将指定地址的2K数据映射至0x00空间，通过REMAP寄存器实现。将地址（2KB对齐）写入REMAP寄存器BASEADD，并将EN位置1，则指定地址内容将被映射至0x00空间，可通过此功能实现向量表的重映射。

例如

BOOT： 0x00 ~ 0x4000

USER： 0x4000 ~ 0x8000

在BOOT中配置REMAP寄存器地址为0x4000并使能，并跳转至USER执行，当读取0x00地址时，返回内容为0x4000地址内容。

加密方式
^^^^

加密支持三种级别

.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 级别 |
     - 说明                             | |
     - 关键字值           | |

   * - 级别1 |
     - 不加密，SWD可正常读写            |    0x00 |
     - |
              |

   * - 级别2 |
     - SW 读取加密，SWD无法读取FLASH，只能执 | 行擦除操作，连接SWD后，FLASH无法执  | 行读操作，读取FLASH会进入Hardfault  |
     - 0x43211234 | | |

   * - 级别3 |
     - SWD封锁，SWD无法                 | 行读取及擦除工作，只能通过ISP读取 |
     - xABCD1234         | |


通过在用户程序中将0x1C偏移地址初始化为指定关键字，即可实现指定级别的加密。程序下载后再次上电后，芯片将处于指定加密级别的状态。

寄存器映射
~~~~~

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 名称   |
     - | 偏移 |
     - |
       |
        |
        |
     - |

        |
        |
     - 描述                       | | | |

   * - FLASHCTLBASE：0 |x4004A000
     - |
     -
     -
     -

   * - DATA
     - 0x00
     -
     - 0x 00000
     - 写数据寄存器               |

   * - ADDR
     - 0x04
     -
     - 0x 00000
     - 写地址寄存器               |

   * - ERASE
     - 0x08
     -
     - 0x 00000
     - 擦除寄存器                 |

   * - PROGEN
     - 0x0C
     -
     - 0x 00000
     - Program使能寄存器          |

   * - STAT
     - 0x18
     -
     - 0x 00028
     - 状态寄存器                 |

   * - REMAP
     - 0x28
     -
     - 0x 00000
     - 地址映射寄存器             |


寄存器描述
~~~~~

写数据寄存器DATA
^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - DATA
     - 0x00
     -
     - 0 000000
     - 写数据寄存器               |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - DATA
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - DATA
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - DATA
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - DATA
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:0
     - DATA
     - 需要写的数据                                |

       为保证FIFO不会溢出，只要write               | FIFO非满就可以写入新的数据。                |


写地址寄存器ADDR
^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - ADDR
     - 0x04
     -
     - 0 000000
     - 写地址寄存器               |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - ADDR
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - ADDR
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - ADDR
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - ADDR
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:0
     - ADDR
     - Flash写入起始地址                           |


擦除寄存器ERASE
^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - ERASE
     - 0x08
     -
     - 0 000000
     - 擦除寄存器                 |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - REQ
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     - ADDR

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - ADDR
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - ADDR
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:24
     - REQ
     - 擦使能,8位全为1有效                         |

   * - 23:17
     - -
     - -

   * - 16:0
     - ADDR
     - 擦除地址，全1表示整个eFlash 擦除            |

       每次page擦可擦除1K空间                      |


PROGEN寄存器 PROGEN
^^^^^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - PROGEN
     - 0x0C
     -
     - 0 000000
     - Program使能寄存器          |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - PROGEN
     -
     -
     -
     -
     -
     -
     -


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:1
     - -
     - -

   * - 0
     - PROGEN
     - 1：eflash program en                        |


状态寄存器STAT
^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - STAT
     - 0x18
     -
     - 0 000028
     - 状态寄存器                 |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - FLASHIDLE
     - -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     -
     -
     - FI FOFULL
     - FIF OEMPTY
     - RE ADBUSY
     - PR OGBUSY
     - ERA SEBUSY


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31
     - FLASHIDLE
     - 1：flash空闲                                |

       0：flash 忙                                 |

   * - 30:5
     - -
     - -

   * - 4
     - FIFOFULL
     - write FIFO满                                |

   * - 3
     - FIFOEMPTY
     - write fifo 空                               |

   * - 2
     - READBUSY
     - read操作进行中，RO                          |

   * - 1
     - PROGBUSY
     - program操作进行中，RO                       |

   * - 0
     - ERASEBUSY
     - erase操作进行中，RO                         |


地址映射寄存器REMAP
^^^^^^^^^^^^

.. list-table::
   :widths: 20 20 20 20 20
   :header-rows: 0


   * - 寄存器 |
     - | 偏移 |
     - |
       |
         |
     - 复位值 |    描 | |
     - |
            |
              |

   * - REMAP
     - 0x28
     -
     - 0 00_000
     - 地址映射寄存器             |


.. list-table::
   :widths: 12 12 12 12 12 12 12 12
   :header-rows: 0


   * - 31
     - 30
     - 29
     - 28
     - 27
     - 26
     - 25
     - 24

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 23
     - 22
     - 21
     - 20
     - 19
     - 18
     - 17
     - 16

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 15
     - 14
     - 13
     - 12
     - 11
     - 10
     - 9
     - 8

   * - -
     -
     -
     -
     -
     -
     -
     -

   * - 7
     - 6
     - 5
     - 4
     - 3
     - 2
     - 1
     - 0

   * - -
     - OFFSET
     -
     -
     -
     -
     -
     - ON


.. list-table::
   :widths: 33 33 33
   :header-rows: 0


   * - 位域 |
     - 名称     | |
     - 描述                                        | |

   * - 31:7
     - -
     - -

   * - 6:1
     - OFFSET
     - BASEADD地址                                 |

       将0地址开头的                               | 地址的访问都映射到BASEADD基地址对应的2K地址 |

   * - 0
     - ON
     - REMAP

       1：打开                                     |

       0：关闭                                     |

